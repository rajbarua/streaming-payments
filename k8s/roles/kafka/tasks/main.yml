---
######################
## Strimzi
######################
- name: Install Strimzi
  kubernetes.core.helm:
    name: strimzi-cluster-operator
    chart_ref: oci://quay.io/strimzi-helm/strimzi-kafka-operator
    namespace: kafka
    create_namespace: true
    values:
      watchAnyNamespace: true
  tags:
    - kafka
    - strimzi
#Wait for Strimzi to be ready
- name: Wait for Strimzi to be ready
  shell: "kubectl wait --for=condition=ready pod -l name=strimzi-cluster-operator --timeout=300s -n kafka"
  tags:
    - kafka
    - strimzi
######################
## Kafka
######################    
# Create KafkaNodePool
- name: Create KafkaNodePool
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: kafka.strimzi.io/v1beta2
      kind: KafkaNodePool
      metadata:
        name: dual-role
        namespace: kafka
        labels:
          strimzi.io/cluster: my-cluster
      spec:
        replicas: 2 #3
        roles: 
          - controller
          - broker
        storage:
          type: ephemeral
        template:
          pod:
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: strimzi.io/name
                        operator: In
                        values:
                          - my-cluster-kafka
                  topologyKey: kubernetes.io/hostname
  tags:
    - kafka
    - kafka-crd
    - kafka-node-pool
# Create ConfigMap called kafka-metrics
- name: Create ConfigMap called kafka-metrics
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: kafka-metrics
        namespace: kafka
      data:
        kafka-metrics-config.yml: |-
          lowercaseOutputName: true
          rules:
          - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
            name: kafka_server_$1_$2
            type: GAUGE
            labels:
              clientId: "$3"
              topic: "$4"
              partition: "$5"
          - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
            name: kafka_server_$1_$2
            type: GAUGE
            labels:
              clientId: "$3"
              broker: "$4:$5"
          - pattern: kafka.server<type=(.+), cipher=(.+), protocol=(.+), listener=(.+), networkProcessor=(.+)><>connections
            name: kafka_server_$1_connections_tls_info
            type: GAUGE
            labels:
              cipher: "$2"
              protocol: "$3"
              listener: "$4"
              networkProcessor: "$5"
          - pattern: kafka.server<type=(.+), clientSoftwareName=(.+), clientSoftwareVersion=(.+), listener=(.+), networkProcessor=(.+)><>connections
            name: kafka_server_$1_connections_software
            type: GAUGE
            labels:
              clientSoftwareName: "$2"
              clientSoftwareVersion: "$3"
              listener: "$4"
              networkProcessor: "$5"
          - pattern: "kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+):"
            name: kafka_server_$1_$4
            type: GAUGE
            labels:
              listener: "$2"
              networkProcessor: "$3"
          - pattern: kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+)
            name: kafka_server_$1_$4
            type: GAUGE
            labels:
              listener: "$2"
              networkProcessor: "$3"
          - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>MeanRate
            name: kafka_$1_$2_$3_percent
            type: GAUGE
          - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>Value
            name: kafka_$1_$2_$3_percent
            type: GAUGE
          - pattern: kafka.(\w+)<type=(.+), name=(.+)Percent\w*, (.+)=(.+)><>Value
            name: kafka_$1_$2_$3_percent
            type: GAUGE
            labels:
              "$4": "$5"
          - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+), (.+)=(.+)><>Count
            name: kafka_$1_$2_$3_total
            type: COUNTER
            labels:
              "$4": "$5"
              "$6": "$7"
          - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count
            name: kafka_$1_$2_$3_total
            type: COUNTER
            labels:
              "$4": "$5"
          - pattern: kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count
            name: kafka_$1_$2_$3_total
            type: COUNTER
          - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              "$4": "$5"
              "$6": "$7"
          - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              "$4": "$5"
          - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Value
            name: kafka_$1_$2_$3
            type: GAUGE
          - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count
            name: kafka_$1_$2_$3_count
            type: COUNTER
            labels:
              "$4": "$5"
              "$6": "$7"
          - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\d+)thPercentile
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              "$4": "$5"
              "$6": "$7"
              quantile: "0.$8"
          - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count
            name: kafka_$1_$2_$3_count
            type: COUNTER
            labels:
              "$4": "$5"
          - pattern: kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              "$4": "$5"
              quantile: "0.$6"
          - pattern: kafka.(\w+)<type=(.+), name=(.+)><>Count
            name: kafka_$1_$2_$3_count
            type: COUNTER
          - pattern: kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile
            name: kafka_$1_$2_$3
            type: GAUGE
            labels:
              quantile: "0.$4"
          - pattern: "kafka.server<type=raft-metrics><>(.+-total|.+-max):"
            name: kafka_server_raftmetrics_$1
            type: COUNTER
          - pattern: "kafka.server<type=raft-metrics><>(.+):"
            name: kafka_server_raftmetrics_$1
            type: GAUGE
          - pattern: "kafka.server<type=raft-channel-metrics><>(.+-total|.+-max):"
            name: kafka_server_raftchannelmetrics_$1
            type: COUNTER
          - pattern: "kafka.server<type=raft-channel-metrics><>(.+):"
            name: kafka_server_raftchannelmetrics_$1
            type: GAUGE
          - pattern: "kafka.server<type=broker-metadata-metrics><>(.+):"
            name: kafka_server_brokermetadatametrics_$1
            type: GAUGE
  tags:
    - kafka
    - kafka-crd
# Create Kafka cluster
- name: Create Kafka cluster
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: kafka.strimzi.io/v1beta2
      kind: Kafka
      metadata:
        name: my-cluster
        namespace: kafka
        annotations: # (1)
          strimzi.io/node-pools: enabled
          strimzi.io/kraft: enabled
      spec:
        kafka:
          config:
            offsets.topic.replication.factor: 2 #3
            transaction.state.log.replication.factor: 2 #3
            transaction.state.log.min.isr: 1 #2
            default.replication.factor: 2 #3
            min.insync.replicas: 2
            inter.broker.protocol.version: '3.6'
          storage: # (2)
            type: ephemeral
          listeners:
            - name: plain
              port: 9092
              type: internal
              tls: false
            - name: tls
              port: 9093
              type: internal
              tls: true
          version: 3.8.0
          replicas: 2 #3
          metricsConfig: # (3)
            type: jmxPrometheusExporter
            valueFrom:
              configMapKeyRef:
                name: kafka-metrics
                key: kafka-metrics-config.yml
        entityOperator:
          topicOperator: {}
          userOperator: {}
        cruiseControl: {} # (4)
        # (5)
        zookeeper:
          storage:
            type: ephemeral
          replicas: 2 #3
  tags:
    - kafka
    - kafka-crd
    - kafka-cluster
# Wait for Kafka cluster to be ready. Retry three times on error
- name: Wait for Kafka cluster to be ready
  shell: "kubectl wait --for=condition=ready pod -l strimzi.io/kind=Kafka --timeout=300s -n kafka"
  register: command_result
  until: command_result.rc == 0
  retries: 20
  delay: 10
  tags:
    - kafka
    - kafka-crd
    - kafka-cluster
  
# Create a topic called credit-transfer-transactions
- name: Create a kafka topic called credit-transfer-transactions
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: kafka.strimzi.io/v1beta2
      kind: KafkaTopic
      metadata:
        name: credit-transfer-transactions
        namespace: kafka
        labels:
          strimzi.io/cluster: my-cluster
      spec:
        partitions: 271
        replicas: 1 #3
        config:
          retention.ms: 7200000
  tags:
    - kafka
    - topic  

